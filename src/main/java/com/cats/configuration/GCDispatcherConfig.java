package com.cats.configuration;

/*
 * Copyright 2021 Comcast Cable Communications Management, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import com.cats.dto.GCDispatcherConfigDto;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.extern.slf4j.Slf4j;
import lombok.Setter;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.LoaderOptions;
import org.yaml.snakeyaml.TypeDescription;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import org.yaml.snakeyaml.nodes.Tag;
import org.yaml.snakeyaml.representer.Representer;

@Slf4j
public class GCDispatcherConfig {

    private String apiBase;
    private List<IRDeviceConfig> irDevices;

    public void setApiBase(String baseGcDispatcherUrl) {
        this.apiBase = baseGcDispatcherUrl;
    }

    @JsonProperty("gcDispatcherApiBase")
    public String getApiBase() {
        return apiBase;
    }

    @JsonProperty("irDevices")
    public List<IRDeviceConfig> getIrDevices() {
        return irDevices;
    }

    public void setIrDevices(List<IRDeviceConfig> irDevices) {
        List<IRDeviceConfig> gcDevices = new ArrayList<>();

        for (IRDeviceConfig device : irDevices) {
            if (device.getType().equals("itach")) {
                gcDevices.add(device);
            }
        }

        this.irDevices = gcDevices;
    }

    public static void writeGCDispatcherConfigYaml(List<IRDeviceConfig> deviceConfigs, String gcDispatcherApiBase) throws IOException {


        GCDispatcherConfig configToWrite = new GCDispatcherConfig();
        configToWrite.setIrDevices(deviceConfigs);
        configToWrite.setApiBase(gcDispatcherApiBase);
        FileWriter writer = null;

        try {
            LoaderOptions loaderOptions = new LoaderOptions();
            Constructor constructor = new Constructor(GCDispatcherConfigDto.class, loaderOptions);

            TypeDescription configDescription = new TypeDescription(GCDispatcherConfigDto.class);

            configDescription.addPropertyParameters("irDevices", IRDeviceConfig.class);
            constructor.addTypeDescription(configDescription);

            writer = new FileWriter(getConfigLocation());

            DumperOptions options = new DumperOptions();
            options.setSplitLines(false);
            options.setIndent(4);
            options.setPrettyFlow(true);
            options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);

            Representer representer = new Representer(options);
            representer.addClassTag(GCDispatcherConfigDto.class, new Tag("!IRMS-Autogenerated-Config"));

            Yaml yaml = new Yaml(constructor, representer, options);
            writer.write(yaml.dump(new GCDispatcherConfigDto(configToWrite)));

        } catch (Exception e) {
            e.printStackTrace();
            log.info("Cannot generate Config for GC Dispatcher: {}", e.getMessage());
        } finally {
            if (writer != null) {
                writer.close();
            }
        }
    }

    private static String getConfigLocation() throws IOException {
        GCDispatcherProperties props = new GCDispatcherProperties();
        return props.getConfigLocationProperty();
    }


}
